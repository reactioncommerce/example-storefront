# This CircleCI configuration uses workflows to fan-out to multiple jobs.  The
# workflow is Dockerized. The first job builds the Docker image which is used
# in all future steps.
#
#  Assumes that the Docker image is published to Docker Hub.
version: 2

# The following stanza defines a map named defaults with a variable that may be
# inserted using the YAML merge (<<: *) key later in the file to save some
# typing. See http://yaml.org/type/merge.html for details.
defaults: &defaults
  environment:
    - DOCKER_REPOSITORY: "reactioncommerce/reaction-next-starterkit"
    - DOCKER_NAMESPACE: "reactioncommerce"
    - DOCKER_NAME: "reaction-next-starterkit"
    - GLOBAL_CACHE_VERSION: “v3”
    - KUSTOMIZE_VERSION: "3.2.1"
    - HUB_VERSION: "2.12.8"
    - GH_USERNAME: "rc-circleci"
    - GH_EMAIL: "circleci@reactioncommerce.com"
    - REACTION_GITOPS_REVIEWERS: "griggheo"

  docker:
    - image: circleci/node:10-stretch

jobs:
  docker-build:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Discover Docker Tags
          command: |
            (cd /tmp && npm install --no-progress @reactioncommerce/ci-scripts@1.4.0 >/dev/null)
            mkdir -p docker-cache
            /tmp/node_modules/.bin/docker-tags "$CIRCLE_SHA1" "$CIRCLE_BRANCH" \
              | tee docker-cache/docker-tags.txt
      - run:
          name: Docker Build
          command: |
            (cd /tmp && npm install --no-progress @reactioncommerce/ci-scripts@1.4.0 >/dev/null)
            /tmp/node_modules/.bin/docker-labels >> Dockerfile
            docker build --tag "$DOCKER_REPOSITORY:$CIRCLE_SHA1" .
            mkdir -p docker-cache
            docker save \
              -o docker-cache/docker-image.tar \
              "$DOCKER_REPOSITORY:$CIRCLE_SHA1"
      - persist_to_workspace:
          root: docker-cache
          paths:
            - docker-image.tar
            - docker-tags.txt
  docker-push:
    <<: *defaults
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: docker-cache
      - run:
          name: Load and Tag Docker Image
          command: |
            docker load < docker-cache/docker-image.tar
            cat docker-cache/docker-tags.txt \
              | xargs -t -I % \
                docker tag \
                  "$DOCKER_REPOSITORY:$CIRCLE_SHA1" \
                  "$DOCKER_REPOSITORY:%"
      - run:
          # Creates a new Docker repository. This is not strictly required if
          # the Docker Hub defaults are set appropriately.
          name: Create Private Docker Hub Repository
          command: |
            # Fetch a login token from environment credentials.
            TOKEN=$(curl \
              -H "Content-Type: application/json" \
              -X POST  \
              -d "{\"username\":\"$DOCKER_USER\",\"password\":\"$DOCKER_PASS\"}" \
              -s \
              https://hub.docker.com/v2/users/login/ \
                | jq -r .token)
            # Try to create the private repo. It exits with success on fail.
            curl \
             -H "Authorization: JWT $TOKEN" \
             -H "Content-Type: application/json" \
             -d "{\"namespace\":\"$DOCKER_NAMESPACE\",
                  \"name\":\"$DOCKER_NAME\",
                  \"description\":\"$DESCRIPTION\",
                  \"full_description\":\"\",
                  \"is_private\":true}" \
            https://hub.docker.com/v2/repositories/
      - run:
          name: Docker Push
          command: |
            docker login -u "$DOCKER_USER" -p "$DOCKER_PASS"
            docker push "$DOCKER_REPOSITORY:$CIRCLE_SHA1"
            cat docker-cache/docker-tags.txt \
                | xargs -t -I % \
                docker push "$DOCKER_REPOSITORY:%"

  create-gitops-pull-request:
    <<: *defaults
    steps:
      - run:
          name: Clone reaction-gitops repo and create PR
          command: |
            # Download kustomize
            cd /tmp
            wget https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv${KUSTOMIZE_VERSION}/kustomize_kustomize.v${KUSTOMIZE_VERSION}_linux_amd64
            sudo mv kustomize_kustomize.v${KUSTOMIZE_VERSION}_linux_amd64 /usr/local/bin/kustomize
            sudo chmod +x /usr/local/bin/kustomize
            # Download hub
            wget https://github.com/github/hub/releases/download/v${HUB_VERSION}/hub-linux-amd64-${HUB_VERSION}.tgz
            tar xfz hub-linux-amd64-${HUB_VERSION}.tgz
            sudo mv hub-linux-amd64-${HUB_VERSION}/bin/hub /usr/local/bin/hub
            sudo chmod +x /usr/local/bin/hub
            # Clone reaction-gitops repo and configure username and email for signing off commits
            export GITHUB_TOKEN="${REACTION_GITOPS_GH_TOKEN}"
            /usr/local/bin/hub clone https://${GITHUB_TOKEN}@github.com/reactioncommerce/reaction-gitops.git
            cd reaction-gitops
            /usr/local/bin/hub config user.name "${GH_USERNAME}"
            /usr/local/bin/hub config user.email "${GH_EMAIL}"
            cd kustomize/reaction-storefront/overlays/staging
            # Create new branch
            /usr/local/bin/hub checkout -b update-image-reaction-storefront-${CIRCLE_SHA1}
            # Modify image tag in kustomization.yaml by calling 'kustomize edit set image'
            /usr/local/bin/kustomize edit set image docker.io/${DOCKER_REPOSITORY}:${CIRCLE_SHA1}
            /usr/local/bin/hub add kustomization.yaml
            # Commit with sign-off
            /usr/local/bin/hub commit -s -m "changed reaction-storefront image tag to ${CIRCLE_SHA1}"
            # Push branch to origin
            /usr/local/bin/hub push --set-upstream origin update-image-reaction-storefront-${CIRCLE_SHA1}
            # Create PR
            /usr/local/bin/hub pull-request --no-edit -r ${REACTION_GITOPS_REVIEWERS}

  lint-javascript:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Lint JavaScript
          command: |
            yarn install
            yarn lint

  test:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: docker-cache
      - run:
          name: Load and Tag Docker Image
          command: |
            docker load < docker-cache/docker-image.tar
            cat docker-cache/docker-tags.txt \
              | xargs -t -I % \
                docker tag \
                  "$DOCKER_REPOSITORY:$CIRCLE_SHA1" \
                  "$DOCKER_REPOSITORY:%"
      - run:
          name: Test
          command: |
            docker run \
              --env-file .env.example \
              --env NODE_ENV=test \
              --name reactionapp_next_starterkit \
              "$DOCKER_REPOSITORY:$CIRCLE_SHA1" \
              yarn test:ci
      - run:
          name: Copy test artifacts from Remote Docker
          command: |
            docker cp \
              reactionapp_next_starterkit:/usr/local/src/reaction-app/reports \
              reports
      - store_test_results:
          path: reports/junit
      - store_artifacts:
          path: reports

  snyk-security:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: docker-cache
      - run:
          name: Load Docker Image
          command: |
            docker load < docker-cache/docker-image.tar
      - run:
          name: Snyk Security
          # Snyk doesn't look up the directory tree for node_modules as
          # NodeJS does so we have to take some extra measures to test in the
          # Docker image. Copy package.json up a directory so that it is a
          # sibling to node_modules, then run snyk test.
          command: |
            answer=$(./.circleci/bin/should-run-snyk.sh)
            if [[ "${answer}" =~ "^YES" ]] ; then
              docker run \
                --env-file .env.example \
                --env "SNYK_TOKEN" \
                --name reactionapp_next_starterkit \
                --workdir /usr/local/src \
                "$DOCKER_REPOSITORY:$CIRCLE_SHA1" \
                sh -c "cp reaction-app/package.json ./ && cp reaction-app/.snyk ./ && snyk test"
            else
              echo "Skipping snyk: ${answer}"
            fi
workflows:
  version: 2
  build_and_test:
    jobs:
      - lint-javascript:
          context: reaction-build-read
      - docker-build:
          context: reaction-build-read
          requires:
            - lint-javascript
      - docker-push:
          context: reaction-publish-docker
          requires:
            - docker-build
      - test:
          context: reaction-validation
          requires:
            - docker-build
      - snyk-security:
          context: reaction-validation
          requires:
            - docker-build
      - create-gitops-pull-request:
          requires:
            - docker-push
          filters:
            branches:
              only: master
